repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'com.android.application'
loadExtraProperties("secret.properties")

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.sensorberg.iot_autoupdate"
        minSdkVersion 22
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // hockey auto-update params
        buildConfigField "String", "HOCKEY_TOKEN", giveMe("HOCKEY_TOKEN")
        buildConfigField "String", "HOCKEY_APP_ID", giveMe("HOCKEY_APP_ID")
        buildConfigField "String", "HOCKEY_APP_PACKAGE_NAME", giveMe("HOCKEY_APP_PACKAGE_NAME")

        // wifi auto-connect
        buildConfigField "String", "WIFI_SSID", giveMe("WIFI_SSID")
        buildConfigField "String", "WIFI_PASS", giveMe("WIFI_PASS")

        // flags
        buildConfigField "boolean", "SET_CLOCK", "true" // switch
        buildConfigField "boolean", "TURN_RADIOS_ON", "true" // make sure bt/wifi are enabled
        buildConfigField "boolean", "DISABLE_SCREEN_TIMEOUT", "true"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    compile 'io.reactivex.rxjava2:rxjava:2.0.4'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.f2prateek.rx.preferences2:rx-preferences:2.0.0-RC1'
    compile 'com.github.budius:logger:1.12_file_instance_2'

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}

def giveMe(String key) {
    if (hasProperty(key)) {
        return wrapInQuotes(getProperty(key))
    }
    def val = System.getenv(key)
    if (val != null) {
        return wrapInQuotes(val)
    }
    return "null"
}

def wrapInQuotes(String wrapMe) {
    return "\"" + wrapMe + "\"";
}


def loadExtraProperties(String fileName) {
    if (new File(fileName).exists()) {
        def props = new Properties()
        props.load(new FileInputStream(fileName))

        props.each { key, val ->
            project.set(key, val)
        }
    }
}
